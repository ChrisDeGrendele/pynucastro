{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pynucastro usage examples\n",
    "\n",
    "This notebook illustrates some of the higher-level data structures in `pynucastro`.\n",
    "\n",
    "Note to run properly, you must have `pynucastro/` in your `PYTHONPATH`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pynucastro as pyrl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading a single rate\n",
    "\n",
    "The `Rate` class holds a single reaction rate and takes a reaclib file as input.  There are a lot of methods in the `Rate` class that allow you to explore the rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "c13pg = pyrl.Rate(\"c13-pg-n14-nacr\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### the original reaclib source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4                                                                         \n",
      "                                                                          \n",
      "                                                                          \n",
      "         p  c13  n14                       nacrn     7.55100e+00          \n",
      " 1.851550e+01 0.000000e+00-1.372000e+01-4.500180e-01                      \n",
      " 3.708230e+00-1.705450e+00-6.666670e-01                                   \n",
      "         p  c13  n14                       nacrr     7.55100e+00          \n",
      " 1.396370e+01-5.781470e+00 0.000000e+00-1.967030e-01                      \n",
      " 1.421260e-01-2.389120e-02-1.500000e+00                                   \n",
      "         p  c13  n14                       nacrr     7.55100e+00          \n",
      " 1.518250e+01-1.355430e+01 0.000000e+00 0.000000e+00                      \n",
      " 0.000000e+00 0.000000e+00-1.500000e+00                                   \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(c13pg.original_source)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### evaluate the rate at a given temperature (in K)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3883.4778216250666"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c13pg.eval(1.e9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a human readable string describing the rate, and the nuclei involved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c13 + p --> n14\n"
     ]
    }
   ],
   "source": [
    "print(c13pg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The nuclei involved are all `Nucleus` objects.  They have members `Z` and `N` that give the proton and neutron number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[p, c13]\n",
      "[n14]\n"
     ]
    }
   ],
   "source": [
    "print(c13pg.reactants)\n",
    "print(c13pg.products)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "r2 = c13pg.reactants[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pynucastro.rates.rate.Nucleus"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 7\n"
     ]
    }
   ],
   "source": [
    "print(r2.Z, r2.N)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### get the temperature sensitivity about some reference T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the exponent when we write the rate as $r = r_0 \\left ( \\frac{T}{T_0} \\right )^\\nu$.  We can estimate this given a reference temperature, $T_0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": [
     "nbval-ignore-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.21089670710968"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c13pg.get_rate_exponent(2.e7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### plot the rate's temperature dependence\n",
    "\n",
    "A reaction rate has a complex temperature dependence that is defined in the reaclib files.  The `plot()` method will plot this for us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": [
     "nbval-skip"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "c13pg.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A rate also knows its density dependence -- this is inferred from the reactants in the rate description and is used to construct the terms needed to write a reaction network.  Note: since we want reaction rates per gram, this number is 1 less than the number of nuclei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c13pg.dens_exp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Working with a group of rates\n",
    "\n",
    "A `RateCollection()` class allows us to work with a group of rates.  This is used to explore their relationship.  Other classes (introduced soon) are built on this and will allow us to output network code directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "files = [\"c12-pg-n13-ls09\", \n",
    "         \"c13-pg-n14-nacr\",\n",
    "         \"n13--c13-wc12\",\n",
    "         \"n13-pg-o14-lg06\",\n",
    "         \"n14-pg-o15-im05\",\n",
    "         \"n15-pa-c12-nacr\",\n",
    "         \"o14--n14-wc12\",\n",
    "         \"o15--n15-wc12\"]\n",
    "rc = pyrl.RateCollection(files)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### print an overview of the network described by this rate collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c12 + p --> n13\n",
      "c13 + p --> n14\n",
      "n13 --> c13\n",
      "n13 + p --> o14\n",
      "n14 + p --> o15\n",
      "n15 + p --> he4 + c12\n",
      "o14 --> n14\n",
      "o15 --> n15\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(rc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p\n",
      "  consumed by:\n",
      "     c12 + p --> n13\n",
      "     c13 + p --> n14\n",
      "     n13 + p --> o14\n",
      "     n14 + p --> o15\n",
      "     n15 + p --> he4 + c12\n",
      "  produced by:\n",
      "\n",
      "he4\n",
      "  consumed by:\n",
      "  produced by:\n",
      "     n15 + p --> he4 + c12\n",
      "\n",
      "c12\n",
      "  consumed by:\n",
      "     c12 + p --> n13\n",
      "  produced by:\n",
      "     n15 + p --> he4 + c12\n",
      "\n",
      "c13\n",
      "  consumed by:\n",
      "     c13 + p --> n14\n",
      "  produced by:\n",
      "     n13 --> c13\n",
      "\n",
      "n13\n",
      "  consumed by:\n",
      "     n13 --> c13\n",
      "     n13 + p --> o14\n",
      "  produced by:\n",
      "     c12 + p --> n13\n",
      "\n",
      "n14\n",
      "  consumed by:\n",
      "     n14 + p --> o15\n",
      "  produced by:\n",
      "     c13 + p --> n14\n",
      "     o14 --> n14\n",
      "\n",
      "n15\n",
      "  consumed by:\n",
      "     n15 + p --> he4 + c12\n",
      "  produced by:\n",
      "     o15 --> n15\n",
      "\n",
      "o14\n",
      "  consumed by:\n",
      "     o14 --> n14\n",
      "  produced by:\n",
      "     n13 + p --> o14\n",
      "\n",
      "o15\n",
      "  consumed by:\n",
      "     o15 --> n15\n",
      "  produced by:\n",
      "     n14 + p --> o15\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(rc.network_overview())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show a network diagram\n",
    "\n",
    "At the moment, we rely on NetworkX to visualize the network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": [
     "nbval-skip"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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hTP462pieuxQwvf3v6CnXedt4NbeUUDWAMAflGAgT2am8za0qb2hTjsODCk5myrrTQ5M6ROTtp/SydfSEUPWAKD8zLmg36uofMysTVIikUiorY2ZD+RvanZOD/UNa//QZNneY3Nnk7b1rlE9JyZFGlkDAEny/iqSlGBKMErQNzypnYcTGpmckUklzdYtbL+msU5be9q5NitOQNYARBwl2EuUYHjBOaeB8aSeOjamfUMTcpLMpHx+tRbKSMykTR1NOmtdi7qb49ydCxmRNQARRgn2EiUYXpuamVP/6LQGJ5IaGE//zKZW/o7VxkzdzXF1N8fV1RTX+tZ6NdTxVTTyR9YARAwl2EuUYJSbc05TsynNpZzmnFONmWpipobaGDNw8BRZAxBynv8h4+oQQBmZmRqZdYMPyBoAFIabZQAAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACIHEowAAAAIocSDAAAgMihBAMAACByKMEAAACInNpKDyAIXnzxxUoPAQAAAFm0t7e3SRp1zjmvXtM8fK2qY2abJO2r8DAAAACwurXOuQGvXizqM8FD8/+7UdJoJQdSZVolvSD2WyHYZ8VhvxWOfVYc9lvh2GfFYb8VbmGfJb180aiX4AWjzjmOiciTmS38X/ZbnthnxWG/FY59Vhz2W+HYZ8VhvxVuyT7zFCfGAQAAIHIowQAAAIicqJfgaUmfnv9f5I/9Vjj2WXHYb4VjnxWH/VY49llx2G+FK8s+i/TVIQAAABBNUZ8JBgAAQARRggEAABA5lGAAAABEDiUYAAAAkRPqEmxm15uZW/bTn8d2f2xm+8xsysweNbPX+THeIChmnxW7n8PGzHrM7BtmNmhm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\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rc.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore the network's rates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To evaluate the rates, we need a composition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "comp = pyrl.Composition(rc.get_nuclei())\n",
    "comp.set_solar_like()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interactive exploration is enabled through the `Explorer` class, which takes a `RateCollection` and a `Composition`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": [
     "nbval-skip"
    ]
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f767a49ddddd47a7a43feafd35213365",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(FloatSlider(value=4.0, description='logrho', max=6.0, min=2.0), FloatSlider(value=8.0, d…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "re = pyrl.Explorer(rc, comp)\n",
    "re.explore()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Integrating networks\n",
    "\n",
    "If we don't just want to explore the network interactively in a notebook, but want to output code to run integrate it, we need to create one of `PythonNetwork`, `StarKillerNetwork` or `SundialsNetwork`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "pynet = pyrl.PythonNetwork(files)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A network knows how to express the terms that make up the function (in the right programming language).  For instance, you can get the term for the ${}^{13}\\mathrm{C} (p,\\gamma) {}^{14}\\mathrm{N}$ rate as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rho*Y[ip]*Y[ic13]*lambda_p_c13__n14\n"
     ]
    }
   ],
   "source": [
    "print(pynet.ydot_string(c13pg))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and the code needed to evaluate that rate (the T-dependent part) as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "def p_c13__n14(tf):\n",
      "    # c13 + p --> n14\n",
      "    rate = 0.0\n",
      "    \n",
      "    # nacrn\n",
      "    rate += np.exp(  18.5155 + -13.72*tf.T913i + -0.450018*tf.T913\n",
      "                  + 3.70823*tf.T9 + -1.70545*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  13.9637 + -5.78147*tf.T9i + -0.196703*tf.T913\n",
      "                  + 0.142126*tf.T9 + -0.0238912*tf.T953 + -1.5*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  15.1825 + -13.5543*tf.T9i\n",
      "                  + -1.5*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(pynet.function_string(c13pg))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `write_network()` method will output the python code needed to define the RHS of a network for integration with the SciPy integrators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "import numpy as np\n",
      "from pynucastro.rates import Tfactors\n",
      "\n",
      "ip = 0\n",
      "ihe4 = 1\n",
      "ic12 = 2\n",
      "ic13 = 3\n",
      "in13 = 4\n",
      "in14 = 5\n",
      "in15 = 6\n",
      "io14 = 7\n",
      "io15 = 8\n",
      "nnuc = 9\n",
      "\n",
      "A = np.zeros((nnuc), dtype=np.int32)\n",
      "\n",
      "A[ip] = 1\n",
      "A[ihe4] = 4\n",
      "A[ic12] = 12\n",
      "A[ic13] = 13\n",
      "A[in13] = 13\n",
      "A[in14] = 14\n",
      "A[in15] = 15\n",
      "A[io14] = 14\n",
      "A[io15] = 15\n",
      "\n",
      "def p_c12__n13(tf):\n",
      "    # c12 + p --> n13\n",
      "    rate = 0.0\n",
      "    \n",
      "    # ls09n\n",
      "    rate += np.exp(  17.1482 + -13.692*tf.T913i + -0.230881*tf.T913\n",
      "                  + 4.44362*tf.T9 + -3.15898*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # ls09r\n",
      "    rate += np.exp(  17.5428 + -3.77849*tf.T9i + -5.10735*tf.T913i + -2.24111*tf.T913\n",
      "                  + 0.148883*tf.T9 + -1.5*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def p_c13__n14(tf):\n",
      "    # c13 + p --> n14\n",
      "    rate = 0.0\n",
      "    \n",
      "    # nacrn\n",
      "    rate += np.exp(  18.5155 + -13.72*tf.T913i + -0.450018*tf.T913\n",
      "                  + 3.70823*tf.T9 + -1.70545*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  13.9637 + -5.78147*tf.T9i + -0.196703*tf.T913\n",
      "                  + 0.142126*tf.T9 + -0.0238912*tf.T953 + -1.5*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  15.1825 + -13.5543*tf.T9i\n",
      "                  + -1.5*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def n13__c13(tf):\n",
      "    # n13 --> c13\n",
      "    rate = 0.0\n",
      "    \n",
      "    # wc12w\n",
      "    rate += np.exp(  -6.7601)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def p_n13__o14(tf):\n",
      "    # n13 + p --> o14\n",
      "    rate = 0.0\n",
      "    \n",
      "    # lg06n\n",
      "    rate += np.exp(  18.1356 + -15.1676*tf.T913i + 0.0955166*tf.T913\n",
      "                  + 3.0659*tf.T9 + -0.507339*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # lg06r\n",
      "    rate += np.exp(  10.9971 + -6.12602*tf.T9i + 1.57122*tf.T913i\n",
      "                  + -1.5*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def p_n14__o15(tf):\n",
      "    # n14 + p --> o15\n",
      "    rate = 0.0\n",
      "    \n",
      "    # im05n\n",
      "    rate += np.exp(  17.01 + -15.193*tf.T913i + -0.161954*tf.T913\n",
      "                  + -7.52123*tf.T9 + -0.987565*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # im05r\n",
      "    rate += np.exp(  6.73578 + -4.891*tf.T9i\n",
      "                  + 0.0682*tf.lnT9)\n",
      "    # im05r\n",
      "    rate += np.exp(  7.65444 + -2.998*tf.T9i\n",
      "                  + -1.5*tf.lnT9)\n",
      "    # im05n\n",
      "    rate += np.exp(  20.1169 + -15.193*tf.T913i + -4.63975*tf.T913\n",
      "                  + 9.73458*tf.T9 + -9.55051*tf.T953 + 0.333333*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def p_n15__he4_c12(tf):\n",
      "    # n15 + p --> he4 + c12\n",
      "    rate = 0.0\n",
      "    \n",
      "    # nacrn\n",
      "    rate += np.exp(  27.4764 + -15.253*tf.T913i + 1.59318*tf.T913\n",
      "                  + 2.4479*tf.T9 + -2.19708*tf.T953 + -0.666667*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  -6.57522 + -1.1638*tf.T9i + 22.7105*tf.T913\n",
      "                  + -2.90707*tf.T9 + 0.205754*tf.T953 + -1.5*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  20.8972 + -7.406*tf.T9i\n",
      "                  + -1.5*tf.lnT9)\n",
      "    # nacrr\n",
      "    rate += np.exp(  -4.87347 + -2.02117*tf.T9i + 30.8497*tf.T913\n",
      "                  + -8.50433*tf.T9 + -1.54426*tf.T953 + -1.5*tf.lnT9)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def o14__n14(tf):\n",
      "    # o14 --> n14\n",
      "    rate = 0.0\n",
      "    \n",
      "    # wc12w\n",
      "    rate += np.exp(  -4.62354)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def o15__n15(tf):\n",
      "    # o15 --> n15\n",
      "    rate = 0.0\n",
      "    \n",
      "    # wc12w\n",
      "    rate += np.exp(  -5.17053)\n",
      "    \n",
      "    return rate\n",
      "\n",
      "def rhs(t, Y, rho, T):\n",
      "\n",
      "    tf = Tfactors(T)\n",
      "\n",
      "    lambda_p_c12__n13 = p_c12__n13(tf)\n",
      "    lambda_p_c13__n14 = p_c13__n14(tf)\n",
      "    lambda_n13__c13 = n13__c13(tf)\n",
      "    lambda_p_n13__o14 = p_n13__o14(tf)\n",
      "    lambda_p_n14__o15 = p_n14__o15(tf)\n",
      "    lambda_p_n15__he4_c12 = p_n15__he4_c12(tf)\n",
      "    lambda_o14__n14 = o14__n14(tf)\n",
      "    lambda_o15__n15 = o15__n15(tf)\n",
      "\n",
      "    dYdt = np.zeros((nnuc), dtype=np.float64)\n",
      "\n",
      "    dYdt[ip] = (\n",
      "       -rho*Y[ip]*Y[ic12]*lambda_p_c12__n13\n",
      "       -rho*Y[ip]*Y[ic13]*lambda_p_c13__n14\n",
      "       -rho*Y[ip]*Y[in13]*lambda_p_n13__o14\n",
      "       -rho*Y[ip]*Y[in14]*lambda_p_n14__o15\n",
      "       -rho*Y[ip]*Y[in15]*lambda_p_n15__he4_c12\n",
      "       )\n",
      "\n",
      "    dYdt[ihe4] = (\n",
      "       +rho*Y[ip]*Y[in15]*lambda_p_n15__he4_c12\n",
      "       )\n",
      "\n",
      "    dYdt[ic12] = (\n",
      "       -rho*Y[ip]*Y[ic12]*lambda_p_c12__n13\n",
      "       +rho*Y[ip]*Y[in15]*lambda_p_n15__he4_c12\n",
      "       )\n",
      "\n",
      "    dYdt[ic13] = (\n",
      "       -rho*Y[ip]*Y[ic13]*lambda_p_c13__n14\n",
      "       +Y[in13]*lambda_n13__c13\n",
      "       )\n",
      "\n",
      "    dYdt[in13] = (\n",
      "       -Y[in13]*lambda_n13__c13\n",
      "       -rho*Y[ip]*Y[in13]*lambda_p_n13__o14\n",
      "       +rho*Y[ip]*Y[ic12]*lambda_p_c12__n13\n",
      "       )\n",
      "\n",
      "    dYdt[in14] = (\n",
      "       -rho*Y[ip]*Y[in14]*lambda_p_n14__o15\n",
      "       +rho*Y[ip]*Y[ic13]*lambda_p_c13__n14\n",
      "       +Y[io14]*lambda_o14__n14\n",
      "       )\n",
      "\n",
      "    dYdt[in15] = (\n",
      "       -rho*Y[ip]*Y[in15]*lambda_p_n15__he4_c12\n",
      "       +Y[io15]*lambda_o15__n15\n",
      "       )\n",
      "\n",
      "    dYdt[io14] = (\n",
      "       -Y[io14]*lambda_o14__n14\n",
      "       +rho*Y[ip]*Y[in13]*lambda_p_n13__o14\n",
      "       )\n",
      "\n",
      "    dYdt[io15] = (\n",
      "       -Y[io15]*lambda_o15__n15\n",
      "       +rho*Y[ip]*Y[in14]*lambda_p_n14__o15\n",
      "       )\n",
      "\n",
      "    return dYdt\n"
     ]
    }
   ],
   "source": [
    "pynet.write_network()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
